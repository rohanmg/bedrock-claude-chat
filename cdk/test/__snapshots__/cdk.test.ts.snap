// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SnapshotTest 1`] = `
{
  "Description": "Bedrock Chat Stack (uksb-1tupboc46)",
  "Outputs": {
    "AuthUserPoolClientId8216BF9A": {
      "Value": {
        "Ref": "AuthUserPoolClientC635291F",
      },
    },
    "AuthUserPoolIdC0605E59": {
      "Value": {
        "Ref": "AuthUserPool8115E87F",
      },
    },
    "BackendApiBackendApiUrl4A0A7879": {
      "Value": {
        "Fn::GetAtt": [
          "BackendApiED3D8698",
          "ApiEndpoint",
        ],
      },
    },
    "DocumentBucketName": {
      "Value": {
        "Ref": "DocumentBucketAE41E5A9",
      },
    },
    "FrontendURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "FrontendDistributionCFDistributionAE9BA647",
                "DomainName",
              ],
            },
          ],
        ],
      },
    },
    "WebSocketWebSocketEndpointF298FA8F": {
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Fn::GetAtt": [
                "WebSocketWebSocketApiA2AA4B88",
                "ApiEndpoint",
              ],
            },
            "/dev",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AccessLogBucketAutoDeleteObjectsCustomResource01AB31E8": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "AccessLogBucketPolicyF52D2D01",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "AccessLogBucketDA470295",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "AccessLogBucketDA470295": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "ObjectWriter",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "AccessLogBucketPolicyF52D2D01": {
      "Properties": {
        "Bucket": {
          "Ref": "AccessLogBucketDA470295",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AccessLogBucketDA470295",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AccessLogBucketDA470295",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "AccessLogBucketDA470295",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AccessLogBucketDA470295",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "AuthUserPool8115E87F": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_phone_number",
              "Priority": 1,
            },
            {
              "Name": "verified_email",
              "Priority": 2,
            },
          ],
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": false,
        },
        "AutoVerifiedAttributes": [
          "email",
        ],
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireNumbers": true,
            "RequireSymbols": true,
            "RequireUppercase": true,
          },
        },
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UsernameAttributes": [
          "email",
        ],
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Retain",
    },
    "AuthUserPoolClientC635291F": {
      "Properties": {
        "AllowedOAuthFlows": [
          "implicit",
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": [
          "profile",
          "phone",
          "email",
          "openid",
          "aws.cognito.signin.user.admin",
        ],
        "CallbackURLs": [
          "https://example.com",
        ],
        "ExplicitAuthFlows": [
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_USER_SRP_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
        ],
        "IdTokenValidity": 1440,
        "SupportedIdentityProviders": [
          "COGNITO",
        ],
        "TokenValidityUnits": {
          "IdToken": "minutes",
        },
        "UserPoolId": {
          "Ref": "AuthUserPool8115E87F",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "BackendApiAuthorizerD604C09E": {
      "Properties": {
        "ApiId": {
          "Ref": "BackendApiED3D8698",
        },
        "AuthorizerType": "JWT",
        "IdentitySource": [
          "$request.header.Authorization",
        ],
        "JwtConfiguration": {
          "Audience": [
            {
              "Ref": "AuthUserPoolClientC635291F",
            },
          ],
          "Issuer": {
            "Fn::Join": [
              "",
              [
                "https://cognito-idp.",
                {
                  "Ref": "AWS::Region",
                },
                ".amazonaws.com/",
                {
                  "Ref": "AuthUserPool8115E87F",
                },
              ],
            ],
          },
        },
        "Name": "Authorizer",
      },
      "Type": "AWS::ApiGatewayV2::Authorizer",
    },
    "BackendApiDELETEproxy5E114AEA": {
      "Properties": {
        "ApiId": {
          "Ref": "BackendApiED3D8698",
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "BackendApiAuthorizerD604C09E",
        },
        "RouteKey": "DELETE /{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "BackendApiGETproxyIntegration291A9206",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "BackendApiDELETEproxyIntegrationPermission8A59D167": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "BackendApiHandlerF69AE07A",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "BackendApiED3D8698",
              },
              "/*/*/{proxy+}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "BackendApiDefaultStage395BF519": {
      "Properties": {
        "ApiId": {
          "Ref": "BackendApiED3D8698",
        },
        "AutoDeploy": true,
        "StageName": "$default",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "BackendApiED3D8698": {
      "Properties": {
        "CorsConfiguration": {
          "AllowHeaders": [
            "*",
          ],
          "AllowMethods": [
            "GET",
            "HEAD",
            "OPTIONS",
            "POST",
            "PUT",
            "PATCH",
            "DELETE",
          ],
          "AllowOrigins": [
            "*",
          ],
          "MaxAge": 864000,
        },
        "Name": "Default",
        "ProtocolType": "HTTP",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "BackendApiGETproxyFCC836F3": {
      "Properties": {
        "ApiId": {
          "Ref": "BackendApiED3D8698",
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "BackendApiAuthorizerD604C09E",
        },
        "RouteKey": "GET /{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "BackendApiGETproxyIntegration291A9206",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "BackendApiGETproxyIntegration291A9206": {
      "Properties": {
        "ApiId": {
          "Ref": "BackendApiED3D8698",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "BackendApiHandlerF69AE07A",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "2.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "BackendApiGETproxyIntegrationPermissionA99552CF": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "BackendApiHandlerF69AE07A",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "BackendApiED3D8698",
              },
              "/*/*/{proxy+}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "BackendApiHandlerF69AE07A": {
      "DependsOn": [
        "BackendApiHandlerRoleDefaultPolicy2EB9FC8A",
        "BackendApiHandlerRoleFEC9E49E",
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": {
        "Code": {
          "ImageUri": {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:a91b99876b337fe27880db7c375807f86d87bd49d7fb47b621040f82b6503355",
          },
        },
        "Environment": {
          "Variables": {
            "ACCOUNT": {
              "Ref": "AWS::AccountId",
            },
            "BEDROCK_REGION": "us-east-1",
            "CLIENT_ID": {
              "Ref": "AuthUserPoolClientC635291F",
            },
            "CORS_ALLOW_ORIGINS": "*",
            "DB_HOST": {
              "Fn::GetAtt": [
                "VectorStoreClusterEFE7D2F8",
                "Endpoint.Address",
              ],
            },
            "DB_NAME": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                  },
                  ":SecretString:dbname::}}",
                ],
              ],
            },
            "DB_PASSWORD": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                  },
                  ":SecretString:password::}}",
                ],
              ],
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "VectorStoreClusterEFE7D2F8",
                "Endpoint.Port",
              ],
            },
            "DB_USER": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                  },
                  ":SecretString:username::}}",
                ],
              ],
            },
            "DOCUMENT_BUCKET": {
              "Ref": "DocumentBucketAE41E5A9",
            },
            "REGION": {
              "Ref": "AWS::Region",
            },
            "TABLE_ACCESS_ROLE_ARN": {
              "Fn::GetAtt": [
                "DatabaseTableAccessRole59AAC05E",
                "Arn",
              ],
            },
            "TABLE_NAME": {
              "Ref": "DatabaseConversationTable03F3FD7A",
            },
            "USER_POOL_ID": {
              "Ref": "AuthUserPool8115E87F",
            },
          },
        },
        "MemorySize": 1024,
        "PackageType": "Image",
        "Role": {
          "Fn::GetAtt": [
            "BackendApiHandlerRoleFEC9E49E",
            "Arn",
          ],
        },
        "Timeout": 30,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "BackendApiHandlerSecurityGroupAA02EE67",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
            },
            {
              "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "BackendApiHandlerRoleDefaultPolicy2EB9FC8A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "DatabaseTableAccessRole59AAC05E",
                  "Arn",
                ],
              },
            },
            {
              "Action": "bedrock:*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DocumentBucketAE41E5A9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DocumentBucketAE41E5A9",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BackendApiHandlerRoleDefaultPolicy2EB9FC8A",
        "Roles": [
          {
            "Ref": "BackendApiHandlerRoleFEC9E49E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "BackendApiHandlerRoleFEC9E49E": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BackendApiHandlerSecurityGroupAA02EE67": {
      "DependsOn": [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": {
        "GroupDescription": "Automatic security group for Lambda Function MyTestStackBackendApiHandler380C773E",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "BackendApiPATCHproxy5B4B4552": {
      "Properties": {
        "ApiId": {
          "Ref": "BackendApiED3D8698",
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "BackendApiAuthorizerD604C09E",
        },
        "RouteKey": "PATCH /{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "BackendApiGETproxyIntegration291A9206",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "BackendApiPATCHproxyIntegrationPermissionE3668C5E": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "BackendApiHandlerF69AE07A",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "BackendApiED3D8698",
              },
              "/*/*/{proxy+}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "BackendApiPOSTproxy1D699989": {
      "Properties": {
        "ApiId": {
          "Ref": "BackendApiED3D8698",
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "BackendApiAuthorizerD604C09E",
        },
        "RouteKey": "POST /{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "BackendApiGETproxyIntegration291A9206",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "BackendApiPOSTproxyIntegrationPermissionFA8B3572": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "BackendApiHandlerF69AE07A",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "BackendApiED3D8698",
              },
              "/*/*/{proxy+}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "BackendApiPUTproxyDC049326": {
      "Properties": {
        "ApiId": {
          "Ref": "BackendApiED3D8698",
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "BackendApiAuthorizerD604C09E",
        },
        "RouteKey": "PUT /{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "BackendApiGETproxyIntegration291A9206",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "BackendApiPUTproxyIntegrationPermission3DD7AC0F": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "BackendApiHandlerF69AE07A",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "BackendApiED3D8698",
              },
              "/*/*/{proxy+}",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
      "DependsOn": [
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "2d56e153cac88d3e0c2f842e8e6f6783b8725bf91f95e0673b4725448a56e96d.zip",
        },
        "Environment": {
          "Variables": {
            "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem",
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "FrontendReactBuildDeployAwsCliLayer6AE670F6",
          },
        ],
        "Role": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "FrontendAssetBucket3FA96E62",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "FrontendAssetBucket3FA96E62",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "cloudfront:GetInvalidation",
                "cloudfront:CreateInvalidation",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "Roles": [
          {
            "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "6c1e9b465fa4b2d651dbc9ce3e732d8702a7b19137327684a71d89f1d355f1a2.zip",
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "AccessLogBucketDA470295",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseConversationTable03F3FD7A": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "PK",
            "AttributeType": "S",
          },
          {
            "AttributeName": "SK",
            "AttributeType": "S",
          },
          {
            "AttributeName": "PublicBotId",
            "AttributeType": "S",
          },
          {
            "AttributeName": "LastBotUsed",
            "AttributeType": "N",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "SKIndex",
            "KeySchema": [
              {
                "AttributeName": "SK",
                "KeyType": "HASH",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
          {
            "IndexName": "PublicBotIdIndex",
            "KeySchema": [
              {
                "AttributeName": "PublicBotId",
                "KeyType": "HASH",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "PK",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "SK",
            "KeyType": "RANGE",
          },
        ],
        "LocalSecondaryIndexes": [
          {
            "IndexName": "LastBotUsedIndex",
            "KeySchema": [
              {
                "AttributeName": "PK",
                "KeyType": "HASH",
              },
              {
                "AttributeName": "LastBotUsed",
                "KeyType": "RANGE",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE",
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "DatabaseTableAccessRole59AAC05E": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "DatabaseTableAccessRoleDefaultPolicy8E332F2F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DatabaseConversationTable03F3FD7A",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DatabaseConversationTable03F3FD7A",
                          "Arn",
                        ],
                      },
                      "/index/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DatabaseTableAccessRoleDefaultPolicy8E332F2F",
        "Roles": [
          {
            "Ref": "DatabaseTableAccessRole59AAC05E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DatabaseWebsocketSessionTable2302422E": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "ConnectionId",
            "AttributeType": "S",
          },
          {
            "AttributeName": "MessagePartId",
            "AttributeType": "N",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "ConnectionId",
            "KeyType": "HASH",
          },
          {
            "AttributeName": "MessagePartId",
            "KeyType": "RANGE",
          },
        ],
        "TimeToLiveSpecification": {
          "AttributeName": "expire",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "DocumentBucketAE41E5A9": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*",
              ],
              "AllowedMethods": [
                "PUT",
              ],
              "AllowedOrigins": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "https://",
                      {
                        "Fn::GetAtt": [
                          "FrontendDistributionCFDistributionAE9BA647",
                          "DomainName",
                        ],
                      },
                    ],
                  ],
                },
                "http://localhost:5173",
              ],
              "MaxAge": 3000,
            },
          ],
        },
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "ObjectWriter",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "DocumentBucketAutoDeleteObjectsCustomResourceEE0C7BB4": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "DocumentBucketPolicyBF1D786A",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "DocumentBucketAE41E5A9",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "DocumentBucketPolicyBF1D786A": {
      "Properties": {
        "Bucket": {
          "Ref": "DocumentBucketAE41E5A9",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DocumentBucketAE41E5A9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DocumentBucketAE41E5A9",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DocumentBucketAE41E5A9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DocumentBucketAE41E5A9",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "EmbeddingBotRemovalHandler613695A6": {
      "DependsOn": [
        "EmbeddingBotRemovalHandlerServiceRoleDefaultPolicyE70F41AB",
        "EmbeddingBotRemovalHandlerServiceRoleFA4A111C",
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": {
        "Code": {
          "ImageUri": {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:5bbd4f37ca5d9aa3b07356fd3288d5873e10851c1e942280cb398f841066e309",
          },
        },
        "Environment": {
          "Variables": {
            "DB_HOST": {
              "Fn::GetAtt": [
                "VectorStoreClusterEFE7D2F8",
                "Endpoint.Address",
              ],
            },
            "DB_NAME": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                  },
                  ":SecretString:dbname::}}",
                ],
              ],
            },
            "DB_PASSWORD": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                  },
                  ":SecretString:password::}}",
                ],
              ],
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "VectorStoreClusterEFE7D2F8",
                "Endpoint.Port",
              ],
            },
            "DB_USER": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                  },
                  ":SecretString:username::}}",
                ],
              ],
            },
            "DOCUMENT_BUCKET": {
              "Ref": "DocumentBucketAE41E5A9",
            },
          },
        },
        "ImageConfig": {
          "Command": [
            "app.bot_remove.handler",
          ],
        },
        "PackageType": "Image",
        "Role": {
          "Fn::GetAtt": [
            "EmbeddingBotRemovalHandlerServiceRoleFA4A111C",
            "Arn",
          ],
        },
        "Timeout": 60,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "EmbeddingBotRemovalHandlerSecurityGroupDA54E481",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
            },
            {
              "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "EmbeddingBotRemovalHandlerDynamoDBEventSourceMyTestStackDatabaseConversationTable0CB5C87B23BE6B69": {
      "DependsOn": [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": {
        "BatchSize": 1,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "DatabaseConversationTable03F3FD7A",
            "StreamArn",
          ],
        },
        "FilterCriteria": {
          "Filters": [
            {
              "Pattern": "{"eventName":["REMOVE"]}",
            },
          ],
        },
        "FunctionName": {
          "Ref": "EmbeddingBotRemovalHandler613695A6",
        },
        "MaximumRetryAttempts": 2,
        "StartingPosition": "TRIM_HORIZON",
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "EmbeddingBotRemovalHandlerSecurityGroupDA54E481": {
      "DependsOn": [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": {
        "GroupDescription": "Automatic security group for Lambda Function MyTestStackEmbeddingBotRemovalHandler8594B1F9",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "EmbeddingBotRemovalHandlerServiceRoleDefaultPolicyE70F41AB": {
      "DependsOn": [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "dynamodb:ListStreams",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:DescribeStream",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "DatabaseConversationTable03F3FD7A",
                  "StreamArn",
                ],
              },
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DocumentBucketAE41E5A9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DocumentBucketAE41E5A9",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "EmbeddingBotRemovalHandlerServiceRoleDefaultPolicyE70F41AB",
        "Roles": [
          {
            "Ref": "EmbeddingBotRemovalHandlerServiceRoleFA4A111C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "EmbeddingBotRemovalHandlerServiceRoleFA4A111C": {
      "DependsOn": [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "EmbeddingCluster52B0C71F": {
      "Type": "AWS::ECS::Cluster",
    },
    "EmbeddingPipe1F5BA3D5": {
      "Properties": {
        "LogConfiguration": {
          "CloudwatchLogsLogDestination": {
            "LogGroupArn": {
              "Fn::GetAtt": [
                "EmbeddingPipeLogGroupEE41BD36",
                "Arn",
              ],
            },
          },
          "Level": "INFO",
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "EmbeddingPipeRole063B515C",
            "Arn",
          ],
        },
        "Source": {
          "Fn::GetAtt": [
            "DatabaseConversationTable03F3FD7A",
            "StreamArn",
          ],
        },
        "SourceParameters": {
          "DynamoDBStreamParameters": {
            "BatchSize": 1,
            "MaximumRetryAttempts": 1,
            "StartingPosition": "LATEST",
          },
          "FilterCriteria": {
            "Filters": [
              {
                "Pattern": "{"dynamodb":{"NewImage":{"SyncStatus":{"S":[{"prefix":"QUEUED"}]}}}}",
              },
            ],
          },
        },
        "Target": {
          "Fn::GetAtt": [
            "EmbeddingCluster52B0C71F",
            "Arn",
          ],
        },
        "TargetParameters": {
          "EcsTaskParameters": {
            "EnableECSManagedTags": false,
            "EnableExecuteCommand": false,
            "LaunchType": "FARGATE",
            "NetworkConfiguration": {
              "AwsvpcConfiguration": {
                "AssignPublicIp": "DISABLED",
                "SecurityGroups": [
                  {
                    "Fn::GetAtt": [
                      "EmbeddingTaskSecurityGroup61399B5B",
                      "GroupId",
                    ],
                  },
                ],
                "Subnets": [
                  {
                    "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
                  },
                  {
                    "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
                  },
                ],
              },
            },
            "Overrides": {
              "ContainerOverrides": [
                {
                  "Command": [
                    "-u",
                    "embedding/main.py",
                    "$.dynamodb.NewImage",
                  ],
                  "Name": "Container",
                },
              ],
            },
            "TaskCount": 1,
            "TaskDefinitionArn": {
              "Ref": "EmbeddingTaskDefinitionF2F21A29",
            },
          },
        },
      },
      "Type": "AWS::Pipes::Pipe",
    },
    "EmbeddingPipeLogGroupEE41BD36": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "RetentionInDays": 7,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "EmbeddingPipeRole063B515C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "pipes.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "EmbeddingPipeRoleDefaultPolicyBD9FBA43": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:DescribeStream",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:ListStreams",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "DatabaseConversationTable03F3FD7A",
                  "StreamArn",
                ],
              },
            },
            {
              "Action": "ecs:RunTask",
              "Effect": "Allow",
              "Resource": [
                {
                  "Ref": "EmbeddingTaskDefinitionF2F21A29",
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "EmbeddingTaskDefinitionF2F21A29",
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "iam:PassRole",
              "Condition": {
                "StringLike": {
                  "iam:PassedToService": "ecs-tasks.amazonaws.com",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "EmbeddingPipeRoleDefaultPolicyBD9FBA43",
        "Roles": [
          {
            "Ref": "EmbeddingPipeRole063B515C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "EmbeddingTaskDefinitionExecutionRole0E052C18": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "EmbeddingTaskDefinitionExecutionRoleDefaultPolicy64F71A40": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":repository/",
                    {
                      "Fn::Sub": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "EmbeddingTaskLogGroupAEEC92C7",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "EmbeddingTaskDefinitionExecutionRoleDefaultPolicy64F71A40",
        "Roles": [
          {
            "Ref": "EmbeddingTaskDefinitionExecutionRole0E052C18",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "EmbeddingTaskDefinitionF2F21A29": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Environment": [
              {
                "Name": "BEDROCK_REGION",
                "Value": "us-east-1",
              },
              {
                "Name": "DB_HOST",
                "Value": {
                  "Fn::GetAtt": [
                    "VectorStoreClusterEFE7D2F8",
                    "Endpoint.Address",
                  ],
                },
              },
              {
                "Name": "DB_PORT",
                "Value": {
                  "Fn::GetAtt": [
                    "VectorStoreClusterEFE7D2F8",
                    "Endpoint.Port",
                  ],
                },
              },
              {
                "Name": "DB_USER",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "{{resolve:secretsmanager:",
                      {
                        "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                      },
                      ":SecretString:username::}}",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "{{resolve:secretsmanager:",
                      {
                        "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                      },
                      ":SecretString:password::}}",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_NAME",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "{{resolve:secretsmanager:",
                      {
                        "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                      },
                      ":SecretString:dbname::}}",
                    ],
                  ],
                },
              },
              {
                "Name": "ACCOUNT",
                "Value": {
                  "Ref": "AWS::AccountId",
                },
              },
              {
                "Name": "REGION",
                "Value": {
                  "Ref": "AWS::Region",
                },
              },
              {
                "Name": "TABLE_NAME",
                "Value": {
                  "Ref": "DatabaseConversationTable03F3FD7A",
                },
              },
              {
                "Name": "TABLE_ACCESS_ROLE_ARN",
                "Value": {
                  "Fn::GetAtt": [
                    "DatabaseTableAccessRole59AAC05E",
                    "Arn",
                  ],
                },
              },
              {
                "Name": "DOCUMENT_BUCKET",
                "Value": {
                  "Ref": "DocumentBucketAE41E5A9",
                },
              },
            ],
            "Essential": true,
            "Image": {
              "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:7d14b83e4eadd9d1b713cb9d4b273089b2f9f2575683aa6e0e1f8d1539d250b1",
            },
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "EmbeddingTaskLogGroupAEEC92C7",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "embed-task",
              },
            },
            "Name": "Container",
          },
        ],
        "Cpu": "2048",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "EmbeddingTaskDefinitionExecutionRole0E052C18",
            "Arn",
          ],
        },
        "Family": "MyTestStackEmbeddingTaskDefinition24CF8284",
        "Memory": "4096",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "RuntimePlatform": {
          "CpuArchitecture": "X86_64",
          "OperatingSystemFamily": "LINUX",
        },
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "EmbeddingTaskDefinitionTaskRole81771C9D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "EmbeddingTaskDefinitionTaskRole81771C9D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "EmbeddingTaskDefinitionTaskRoleDefaultPolicyC333EB4E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "bedrock:*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "DatabaseTableAccessRole59AAC05E",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DocumentBucketAE41E5A9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DocumentBucketAE41E5A9",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "EmbeddingTaskDefinitionTaskRoleDefaultPolicyC333EB4E",
        "Roles": [
          {
            "Ref": "EmbeddingTaskDefinitionTaskRole81771C9D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "EmbeddingTaskLogGroupAEEC92C7": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "RetentionInDays": 7,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "EmbeddingTaskSecurityGroup61399B5B": {
      "Properties": {
        "GroupDescription": "MyTestStack/Embedding/TaskSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "FrontendAssetBucket3FA96E62": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
          {
            "Key": "aws-cdk:cr-owned:96c96686",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "FrontendAssetBucketAutoDeleteObjectsCustomResource8D0834F0": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "FrontendAssetBucketPolicyE9D0C32D",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "FrontendAssetBucket3FA96E62",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "FrontendAssetBucketPolicyE9D0C32D": {
      "Properties": {
        "Bucket": {
          "Ref": "FrontendAssetBucket3FA96E62",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "FrontendAssetBucket3FA96E62",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "FrontendAssetBucket3FA96E62",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "FrontendAssetBucket3FA96E62",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "FrontendAssetBucket3FA96E62",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": {
                "CanonicalUser": {
                  "Fn::GetAtt": [
                    "FrontendOriginAccessIdentity15749265",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "FrontendAssetBucket3FA96E62",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "FrontendDistributionCFDistributionAE9BA647": {
      "Properties": {
        "DistributionConfig": {
          "CustomErrorResponses": [
            {
              "ErrorCachingMinTTL": 0,
              "ErrorCode": 404,
              "ResponseCode": 200,
              "ResponsePagePath": "/",
            },
            {
              "ErrorCachingMinTTL": 0,
              "ErrorCode": 403,
              "ResponseCode": 200,
              "ResponsePagePath": "/",
            },
          ],
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "GET",
              "HEAD",
            ],
            "CachedMethods": [
              "GET",
              "HEAD",
            ],
            "Compress": true,
            "ForwardedValues": {
              "Cookies": {
                "Forward": "none",
              },
              "QueryString": false,
            },
            "TargetOriginId": "origin1",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "DefaultRootObject": "index.html",
          "Enabled": true,
          "HttpVersion": "http2",
          "IPV6Enabled": true,
          "Logging": {
            "Bucket": {
              "Fn::GetAtt": [
                "AccessLogBucketDA470295",
                "RegionalDomainName",
              ],
            },
            "IncludeCookies": false,
            "Prefix": "Frontend/",
          },
          "Origins": [
            {
              "ConnectionAttempts": 3,
              "ConnectionTimeout": 10,
              "DomainName": {
                "Fn::GetAtt": [
                  "FrontendAssetBucket3FA96E62",
                  "RegionalDomainName",
                ],
              },
              "Id": "origin1",
              "S3OriginConfig": {
                "OriginAccessIdentity": {
                  "Fn::Join": [
                    "",
                    [
                      "origin-access-identity/cloudfront/",
                      {
                        "Ref": "FrontendOriginAccessIdentity15749265",
                      },
                    ],
                  ],
                },
              },
            },
          ],
          "PriceClass": "PriceClass_100",
          "ViewerCertificate": {
            "CloudFrontDefaultCertificate": true,
          },
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "FrontendOriginAccessIdentity15749265": {
      "Properties": {
        "CloudFrontOriginAccessIdentityConfig": {
          "Comment": "Allows CloudFront to reach the bucket",
        },
      },
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    },
    "FrontendReactBuildDeployAwsCliLayer6AE670F6": {
      "DependsOn": [
        "FrontendReactBuildE02FF220",
      ],
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip",
        },
        "Description": "/opt/awscli/aws",
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "FrontendReactBuildDeployCustomResourceA2CE2F1C": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "FrontendReactBuildE02FF220",
      ],
      "Properties": {
        "DestinationBucketName": {
          "Ref": "FrontendAssetBucket3FA96E62",
        },
        "DistributionId": {
          "Ref": "FrontendDistributionCFDistributionAE9BA647",
        },
        "Prune": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
            "Arn",
          ],
        },
        "SourceBucketNames": [
          {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
        ],
        "SourceObjectKeys": [
          "b5c5e1aade16ac9d34d6ce541be34323.zip",
        ],
      },
      "Type": "Custom::CDKBucketDeployment",
      "UpdateReplacePolicy": "Delete",
    },
    "FrontendReactBuildE02FF220": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "NodejsBuildCustomResourceHandler25648b212c404f09aa65b6bbb0c446591C4101F8",
            "Arn",
          ],
        },
        "buildCommands": [
          "npm run build",
        ],
        "codeBuildProjectName": {
          "Ref": "FrontendReactBuildProject48A6230E",
        },
        "destinationBucketName": {
          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
        },
        "destinationObjectKey": "b5c5e1aade16ac9d34d6ce541be34323.zip",
        "environment": {
          "VITE_APP_API_ENDPOINT": {
            "Fn::GetAtt": [
              "BackendApiED3D8698",
              "ApiEndpoint",
            ],
          },
          "VITE_APP_REGION": {
            "Ref": "AWS::Region",
          },
          "VITE_APP_USER_POOL_CLIENT_ID": {
            "Ref": "AuthUserPoolClientC635291F",
          },
          "VITE_APP_USER_POOL_ID": {
            "Ref": "AuthUserPool8115E87F",
          },
          "VITE_APP_USE_STREAMING": "true",
          "VITE_APP_WS_ENDPOINT": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::GetAtt": [
                    "WebSocketWebSocketApiA2AA4B88",
                    "ApiEndpoint",
                  ],
                },
                "/dev",
              ],
            ],
          },
        },
        "outputSourceDirectory": "frontend/dist",
        "sources": [
          {
            "commands": [
              "npm ci",
            ],
            "extractPath": "frontend",
            "sourceBucketName": {
              "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            },
            "sourceObjectKey": "c9c188d0c5baeef954d14d78d30af8cb8aa199e13f42c49c9ca31bcfcb9d4612.zip",
          },
        ],
        "workingDirectory": "frontend",
      },
      "Type": "Custom::CDKNodejsBuild",
      "UpdateReplacePolicy": "Delete",
    },
    "FrontendReactBuildProject48A6230E": {
      "Properties": {
        "Artifacts": {
          "Type": "NO_ARTIFACTS",
        },
        "Cache": {
          "Type": "NO_CACHE",
        },
        "EncryptionKey": "alias/aws/s3",
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/standard:7.0",
          "ImagePullCredentialsType": "CODEBUILD",
          "PrivilegedMode": false,
          "Type": "LINUX_CONTAINER",
        },
        "ServiceRole": {
          "Fn::GetAtt": [
            "FrontendReactBuildProjectRole67F82260",
            "Arn",
          ],
        },
        "Source": {
          "BuildSpec": "{
  "version": "0.2",
  "phases": {
    "install": {
      "runtime-versions": {
        "nodejs": 18
      }
    },
    "build": {
      "commands": [
        "current_dir=$(pwd)",
        "\\necho \\"$input\\"\\nfor obj in $(echo \\"$input\\" | jq -r '.[] | @base64'); do\\n  decoded=$(echo \\"$obj\\" | base64 --decode)\\n  assetUrl=$(echo \\"$decoded\\" | jq -r '.assetUrl')\\n  extractPath=$(echo \\"$decoded\\" | jq -r '.extractPath')\\n  commands=$(echo \\"$decoded\\" | jq -r '.commands')\\n\\n  # Download the zip file\\n  aws s3 cp \\"$assetUrl\\" temp.zip\\n\\n  # Extract the zip file to the extractPath directory\\n  mkdir -p \\"$extractPath\\"\\n  unzip temp.zip -d \\"$extractPath\\"\\n\\n  # Remove the zip file\\n  rm temp.zip\\n\\n  # Run the specified commands in the extractPath directory\\n  cd \\"$extractPath\\"\\n  ls -la\\n  eval \\"$commands\\"\\n  cd \\"$current_dir\\"\\n  ls -la\\ndone\\n              ",
        "ls -la",
        "cd \\"$workingDirectory\\"",
        "eval \\"$buildCommands\\"",
        "ls -la",
        "cd \\"$current_dir\\"",
        "cd \\"$outputSourceDirectory\\"",
        "zip -r output.zip ./",
        "aws s3 cp output.zip \\"s3://$destinationBucketName/$destinationObjectKey\\""
      ]
    },
    "post_build": {
      "commands": [
        "echo Build completed on \`date\`",
        "\\nSTATUS='SUCCESS'\\nif [ $CODEBUILD_BUILD_SUCCEEDING -ne 1 ] # Test if the build is failing\\nthen\\nSTATUS='FAILED'\\nREASON=\\"NodejsBuild failed. See CloudWatch Log stream for the detailed reason: \\nhttps://$AWS_REGION.console.aws.amazon.com/cloudwatch/home?region=$AWS_REGION#logsV2:log-groups/log-group/\\\\$252Faws\\\\$252Fcodebuild\\\\$252F$projectName/log-events/$CODEBUILD_LOG_PATH\\"\\nfi\\ncat <<EOF > payload.json\\n{\\n  \\"StackId\\": \\"$stackId\\",\\n  \\"RequestId\\": \\"$requestId\\",\\n  \\"LogicalResourceId\\":\\"$logicalResourceId\\",\\n  \\"PhysicalResourceId\\": \\"$destinationObjectKey\\",\\n  \\"Status\\": \\"$STATUS\\",\\n  \\"Reason\\": \\"$REASON\\"\\n}\\nEOF\\ncurl -vv -i -X PUT -H 'Content-Type:' -d \\"@payload.json\\" \\"$responseURL\\"\\n              "
      ]
    }
  }
}",
          "Type": "NO_SOURCE",
        },
      },
      "Type": "AWS::CodeBuild::Project",
    },
    "FrontendReactBuildProjectRole67F82260": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "FrontendReactBuildProjectRoleDefaultPolicyDFEE9CCE": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:/aws/codebuild/",
                      {
                        "Ref": "FrontendReactBuildProject48A6230E",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:/aws/codebuild/",
                      {
                        "Ref": "FrontendReactBuildProject48A6230E",
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases",
                "codebuild:BatchPutCodeCoverages",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":codebuild:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":report-group/",
                    {
                      "Ref": "FrontendReactBuildProject48A6230E",
                    },
                    "-*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "FrontendReactBuildProjectRoleDefaultPolicyDFEE9CCE",
        "Roles": [
          {
            "Ref": "FrontendReactBuildProjectRole67F82260",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "NodejsBuildCustomResourceHandler25648b212c404f09aa65b6bbb0c446591C4101F8": {
      "DependsOn": [
        "NodejsBuildCustomResourceHandler25648b212c404f09aa65b6bbb0c44659ServiceRoleDefaultPolicyCF8879D3",
        "NodejsBuildCustomResourceHandler25648b212c404f09aa65b6bbb0c44659ServiceRoleCB01FBE6",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "a89beece57b97d45d5016b9e88de3696daaf6ae49a79344dcb1386fe581a125b.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "NodejsBuildCustomResourceHandler25648b212c404f09aa65b6bbb0c44659ServiceRoleCB01FBE6",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "NodejsBuildCustomResourceHandler25648b212c404f09aa65b6bbb0c44659ServiceRoleCB01FBE6": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "NodejsBuildCustomResourceHandler25648b212c404f09aa65b6bbb0c44659ServiceRoleDefaultPolicyCF8879D3": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "codebuild:StartBuild",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "FrontendReactBuildProject48A6230E",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "NodejsBuildCustomResourceHandler25648b212c404f09aa65b6bbb0c44659ServiceRoleDefaultPolicyCF8879D3",
        "Roles": [
          {
            "Ref": "NodejsBuildCustomResourceHandler25648b212c404f09aa65b6bbb0c44659ServiceRoleCB01FBE6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "VPCB9E5F0B4": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VPCIGWB7E252D3": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VPCPrivateSubnet1DefaultRouteAE1D6490": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VPCPublicSubnet1NATGatewayE0556630",
        },
        "RouteTableId": {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet1RouteTableAssociation347902D1": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCPrivateSubnet1RouteTableBE8A6027",
        },
        "SubnetId": {
          "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet1RouteTableBE8A6027": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet1Subnet8BCA10E0": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPrivateSubnet2DefaultRouteF4F5CFD2": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VPCPublicSubnet2NATGateway3C070193",
        },
        "RouteTableId": {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPrivateSubnet2RouteTable0A19E10E": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPrivateSubnet2RouteTableAssociation0C73D413": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCPrivateSubnet2RouteTable0A19E10E",
        },
        "SubnetId": {
          "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPrivateSubnet2SubnetCFCDAA7A": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet1DefaultRoute91CEF279": {
      "DependsOn": [
        "VPCVPCGW99B986DC",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet1EIP6AD938E8": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VPCPublicSubnet1NATGatewayE0556630": {
      "DependsOn": [
        "VPCPublicSubnet1DefaultRoute91CEF279",
        "VPCPublicSubnet1RouteTableAssociation0B0896DC",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VPCPublicSubnet1EIP6AD938E8",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VPCPublicSubnet1RouteTableAssociation0B0896DC": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCPublicSubnet1RouteTableFEE4B781",
        },
        "SubnetId": {
          "Ref": "VPCPublicSubnet1SubnetB4246D30",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet1RouteTableFEE4B781": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet1SubnetB4246D30": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCPublicSubnet2DefaultRouteB7481BBA": {
      "DependsOn": [
        "VPCVPCGW99B986DC",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VPCIGWB7E252D3",
        },
        "RouteTableId": {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VPCPublicSubnet2EIP4947BC00": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VPCPublicSubnet2NATGateway3C070193": {
      "DependsOn": [
        "VPCPublicSubnet2DefaultRouteB7481BBA",
        "VPCPublicSubnet2RouteTableAssociation5A808732",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VPCPublicSubnet2EIP4947BC00",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "VPCPublicSubnet2Subnet74179F39",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VPCPublicSubnet2RouteTable6F1A15F1": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VPCPublicSubnet2RouteTableAssociation5A808732": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VPCPublicSubnet2RouteTable6F1A15F1",
        },
        "SubnetId": {
          "Ref": "VPCPublicSubnet2Subnet74179F39",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VPCPublicSubnet2Subnet74179F39": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "MyTestStack/VPC/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VPCVPCGW99B986DC": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "VPCIGWB7E252D3",
        },
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "VectorStoreClusterEFE7D2F8": {
      "DeletionPolicy": "Snapshot",
      "Properties": {
        "CopyTagsToSnapshot": true,
        "DBClusterParameterGroupName": "default.aurora-postgresql15",
        "DBSubnetGroupName": {
          "Ref": "VectorStoreClusterSubnets1D21CF99",
        },
        "DatabaseName": "postgres",
        "EnableHttpEndpoint": true,
        "Engine": "aurora-postgresql",
        "EngineVersion": "15.3",
        "MasterUserPassword": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "VectorStoreClusterSecretC383F8F3",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "VectorStoreClusterSecretC383F8F3",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "Port": 5432,
        "ServerlessV2ScalingConfiguration": {
          "MaxCapacity": 5,
          "MinCapacity": 0.5,
        },
        "VpcSecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "VectorStoreClusterSecurityGroup42331B1C",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBCluster",
      "UpdateReplacePolicy": "Snapshot",
    },
    "VectorStoreClusterSecretAttachment8CBEA9F9": {
      "Properties": {
        "SecretId": {
          "Ref": "VectorStoreClusterSecretC383F8F3",
        },
        "TargetId": {
          "Ref": "VectorStoreClusterEFE7D2F8",
        },
        "TargetType": "AWS::RDS::DBCluster",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "VectorStoreClusterSecretC383F8F3": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Generated by the CDK for stack: ",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": {
          "ExcludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@"\\",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{"username":"postgres"}",
        },
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "VectorStoreClusterSecurityGroup42331B1C": {
      "Properties": {
        "GroupDescription": "MyTestStack/VectorStore/ClusterSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VectorStoreClusterSecurityGroupfromMyTestStackBackendApiHandlerSecurityGroupE91717A5IndirectPortC13BAD73": {
      "Properties": {
        "Description": "from MyTestStackBackendApiHandlerSecurityGroupE91717A5:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "VectorStoreClusterEFE7D2F8",
            "Endpoint.Port",
          ],
        },
        "GroupId": {
          "Fn::GetAtt": [
            "VectorStoreClusterSecurityGroup42331B1C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "BackendApiHandlerSecurityGroupAA02EE67",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "VectorStoreClusterEFE7D2F8",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "VectorStoreClusterSecurityGroupfromMyTestStackEmbeddingBotRemovalHandlerSecurityGroupECD12D4EIndirectPortEE9F9320": {
      "Properties": {
        "Description": "from MyTestStackEmbeddingBotRemovalHandlerSecurityGroupECD12D4E:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "VectorStoreClusterEFE7D2F8",
            "Endpoint.Port",
          ],
        },
        "GroupId": {
          "Fn::GetAtt": [
            "VectorStoreClusterSecurityGroup42331B1C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "EmbeddingBotRemovalHandlerSecurityGroupDA54E481",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "VectorStoreClusterEFE7D2F8",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "VectorStoreClusterSecurityGroupfromMyTestStackEmbeddingTaskSecurityGroupF121CCD8IndirectPort3F048FDF": {
      "Properties": {
        "Description": "from MyTestStackEmbeddingTaskSecurityGroupF121CCD8:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "VectorStoreClusterEFE7D2F8",
            "Endpoint.Port",
          ],
        },
        "GroupId": {
          "Fn::GetAtt": [
            "VectorStoreClusterSecurityGroup42331B1C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "EmbeddingTaskSecurityGroup61399B5B",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "VectorStoreClusterEFE7D2F8",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "VectorStoreClusterSecurityGroupfromMyTestStackVectorStoreCustomResourceHandlerSecurityGroup22D842ADIndirectPort69CB04AC": {
      "Properties": {
        "Description": "from MyTestStackVectorStoreCustomResourceHandlerSecurityGroup22D842AD:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "VectorStoreClusterEFE7D2F8",
            "Endpoint.Port",
          ],
        },
        "GroupId": {
          "Fn::GetAtt": [
            "VectorStoreClusterSecurityGroup42331B1C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "VectorStoreCustomResourceHandlerSecurityGroupDC91BE23",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "VectorStoreClusterEFE7D2F8",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "VectorStoreClusterSecurityGroupfromMyTestStackWebSocketHandlerSecurityGroupABB13D9EIndirectPortA0E8E121": {
      "Properties": {
        "Description": "from MyTestStackWebSocketHandlerSecurityGroupABB13D9E:{IndirectPort}",
        "FromPort": {
          "Fn::GetAtt": [
            "VectorStoreClusterEFE7D2F8",
            "Endpoint.Port",
          ],
        },
        "GroupId": {
          "Fn::GetAtt": [
            "VectorStoreClusterSecurityGroup42331B1C",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "WebSocketHandlerSecurityGroupA005FB42",
            "GroupId",
          ],
        },
        "ToPort": {
          "Fn::GetAtt": [
            "VectorStoreClusterEFE7D2F8",
            "Endpoint.Port",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "VectorStoreClusterSubnets1D21CF99": {
      "Properties": {
        "DBSubnetGroupDescription": "Subnets for Cluster database",
        "SubnetIds": [
          {
            "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
          },
          {
            "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "VectorStoreClusterwriter113530F5": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": {
        "AutoMinorVersionUpgrade": false,
        "DBClusterIdentifier": {
          "Ref": "VectorStoreClusterEFE7D2F8",
        },
        "DBInstanceClass": "db.serverless",
        "Engine": "aurora-postgresql",
        "PromotionTier": 0,
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "VectorStoreCustomResourceHandlerD1755DC1": {
      "DependsOn": [
        "VectorStoreCustomResourceHandlerServiceRoleBCD74463",
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "c543be3517b946453ea551ff11b75d0484870ac95db7702038bc93098e745ff5.zip",
        },
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "DB_CLUSTER_IDENTIFIER": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                  },
                  ":SecretString:dbClusterIdentifier::}}",
                ],
              ],
            },
            "DB_HOST": {
              "Fn::GetAtt": [
                "VectorStoreClusterEFE7D2F8",
                "Endpoint.Address",
              ],
            },
            "DB_NAME": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                  },
                  ":SecretString:dbname::}}",
                ],
              ],
            },
            "DB_PASSWORD": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                  },
                  ":SecretString:password::}}",
                ],
              ],
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "VectorStoreClusterEFE7D2F8",
                "Endpoint.Port",
              ],
            },
            "DB_USER": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                  },
                  ":SecretString:username::}}",
                ],
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "VectorStoreCustomResourceHandlerServiceRoleBCD74463",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "VectorStoreCustomResourceHandlerSecurityGroupDC91BE23",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
            },
            {
              "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "VectorStoreCustomResourceHandlerSecurityGroupDC91BE23": {
      "DependsOn": [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": {
        "GroupDescription": "Automatic security group for Lambda Function MyTestStackVectorStoreCustomResourceHandler1DCE96B7",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "VectorStoreCustomResourceHandlerServiceRoleBCD74463": {
      "DependsOn": [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "VectorStoreCustomResourceSetupD978CEA4": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "VectorStoreClusterEFE7D2F8",
        "VectorStoreClusterSecretAttachment8CBEA9F9",
        "VectorStoreClusterSecretC383F8F3",
        "VectorStoreClusterSubnets1D21CF99",
        "VectorStoreClusterwriter113530F5",
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "VectorStoreCustomResourceHandlerD1755DC1",
            "Arn",
          ],
        },
        "id": {
          "Fn::GetAtt": [
            "VectorStoreClusterEFE7D2F8",
            "Endpoint.Address",
          ],
        },
      },
      "Type": "Custom::SetupVectorStore",
      "UpdateReplacePolicy": "Delete",
    },
    "WebSocketHandler7115E6CA": {
      "DependsOn": [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
        "WebSocketHandlerRoleDefaultPolicy86A5EC1A",
        "WebSocketHandlerRole4D6EDDA6",
      ],
      "Properties": {
        "Code": {
          "ImageUri": {
            "Fn::Sub": "\${AWS::AccountId}.dkr.ecr.\${AWS::Region}.\${AWS::URLSuffix}/cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}:5bbd4f37ca5d9aa3b07356fd3288d5873e10851c1e942280cb398f841066e309",
          },
        },
        "Environment": {
          "Variables": {
            "ACCOUNT": {
              "Ref": "AWS::AccountId",
            },
            "BEDROCK_REGION": "us-east-1",
            "CLIENT_ID": {
              "Ref": "AuthUserPoolClientC635291F",
            },
            "DB_HOST": {
              "Fn::GetAtt": [
                "VectorStoreClusterEFE7D2F8",
                "Endpoint.Address",
              ],
            },
            "DB_NAME": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                  },
                  ":SecretString:dbname::}}",
                ],
              ],
            },
            "DB_PASSWORD": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                  },
                  ":SecretString:password::}}",
                ],
              ],
            },
            "DB_PORT": {
              "Fn::GetAtt": [
                "VectorStoreClusterEFE7D2F8",
                "Endpoint.Port",
              ],
            },
            "DB_USER": {
              "Fn::Join": [
                "",
                [
                  "{{resolve:secretsmanager:",
                  {
                    "Ref": "VectorStoreClusterSecretAttachment8CBEA9F9",
                  },
                  ":SecretString:username::}}",
                ],
              ],
            },
            "LARGE_PAYLOAD_SUPPORT_BUCKET": {
              "Ref": "WebSocketLargePayloadSupportBucket8286507E",
            },
            "REGION": {
              "Ref": "AWS::Region",
            },
            "TABLE_ACCESS_ROLE_ARN": {
              "Fn::GetAtt": [
                "DatabaseTableAccessRole59AAC05E",
                "Arn",
              ],
            },
            "TABLE_NAME": {
              "Ref": "DatabaseConversationTable03F3FD7A",
            },
            "USER_POOL_ID": {
              "Ref": "AuthUserPool8115E87F",
            },
            "WEBSOCKET_SESSION_TABLE_NAME": {
              "Ref": "DatabaseWebsocketSessionTable2302422E",
            },
          },
        },
        "MemorySize": 512,
        "PackageType": "Image",
        "Role": {
          "Fn::GetAtt": [
            "WebSocketHandlerRole4D6EDDA6",
            "Arn",
          ],
        },
        "Timeout": 900,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "WebSocketHandlerSecurityGroupA005FB42",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Ref": "VPCPrivateSubnet1Subnet8BCA10E0",
            },
            {
              "Ref": "VPCPrivateSubnet2SubnetCFCDAA7A",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "WebSocketHandlerRole4D6EDDA6": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "WebSocketHandlerRoleDefaultPolicy86A5EC1A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "DatabaseTableAccessRole59AAC05E",
                  "Arn",
                ],
              },
            },
            {
              "Action": "bedrock:*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebSocketLargePayloadSupportBucket8286507E",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "WebSocketLargePayloadSupportBucket8286507E",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DatabaseWebsocketSessionTable2302422E",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "execute-api:ManageConnections",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":",
                    {
                      "Ref": "WebSocketWebSocketApiA2AA4B88",
                    },
                    "/*/*/@connections/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "WebSocketHandlerRoleDefaultPolicy86A5EC1A",
        "Roles": [
          {
            "Ref": "WebSocketHandlerRole4D6EDDA6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "WebSocketHandlerSecurityGroupA005FB42": {
      "DependsOn": [
        "VPCPrivateSubnet1DefaultRouteAE1D6490",
        "VPCPrivateSubnet1RouteTableAssociation347902D1",
        "VPCPrivateSubnet2DefaultRouteF4F5CFD2",
        "VPCPrivateSubnet2RouteTableAssociation0C73D413",
      ],
      "Properties": {
        "GroupDescription": "Automatic security group for Lambda Function MyTestStackWebSocketHandler4B917FF6",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "VPCB9E5F0B4",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "WebSocketLargePayloadSupportBucket8286507E": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "ObjectWriter",
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "WebSocketLargePayloadSupportBucketAutoDeleteObjectsCustomResource31847E12": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "WebSocketLargePayloadSupportBucketPolicyA72BF8B4",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "WebSocketLargePayloadSupportBucket8286507E",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "WebSocketLargePayloadSupportBucketPolicyA72BF8B4": {
      "Properties": {
        "Bucket": {
          "Ref": "WebSocketLargePayloadSupportBucket8286507E",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebSocketLargePayloadSupportBucket8286507E",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "WebSocketLargePayloadSupportBucket8286507E",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WebSocketLargePayloadSupportBucket8286507E",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "WebSocketLargePayloadSupportBucket8286507E",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "WebSocketRouteResponseDBA95E52": {
      "Properties": {
        "ApiId": {
          "Ref": "WebSocketWebSocketApiA2AA4B88",
        },
        "RouteId": {
          "Ref": "WebSocketWebSocketApidefaultRoute82A87767",
        },
        "RouteResponseKey": "$default",
      },
      "Type": "AWS::ApiGatewayV2::RouteResponse",
    },
    "WebSocketWebSocketApiA2AA4B88": {
      "Properties": {
        "Name": "WebSocketApi",
        "ProtocolType": "WEBSOCKET",
        "RouteSelectionExpression": "$request.body.action",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "WebSocketWebSocketApiconnectRouteConnectIntegration7D09067D": {
      "Properties": {
        "ApiId": {
          "Ref": "WebSocketWebSocketApiA2AA4B88",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "WebSocketHandler7115E6CA",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "WebSocketWebSocketApiconnectRouteConnectIntegrationPermission85B598E5": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebSocketHandler7115E6CA",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "WebSocketWebSocketApiA2AA4B88",
              },
              "/*$connect",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "WebSocketWebSocketApiconnectRouteF7D31987": {
      "Properties": {
        "ApiId": {
          "Ref": "WebSocketWebSocketApiA2AA4B88",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "$connect",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "WebSocketWebSocketApiconnectRouteConnectIntegration7D09067D",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "WebSocketWebSocketApidefaultRoute82A87767": {
      "Properties": {
        "ApiId": {
          "Ref": "WebSocketWebSocketApiA2AA4B88",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "$default",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "WebSocketWebSocketApidefaultRouteDefaultIntegrationEA154271",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "WebSocketWebSocketApidefaultRouteDefaultIntegrationEA154271": {
      "Properties": {
        "ApiId": {
          "Ref": "WebSocketWebSocketApiA2AA4B88",
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region",
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "WebSocketHandler7115E6CA",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "WebSocketWebSocketApidefaultRouteDefaultIntegrationPermissionFFF35EBD": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "WebSocketHandler7115E6CA",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "WebSocketWebSocketApiA2AA4B88",
              },
              "/*$default",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "WebSocketWebSocketStageD5241643": {
      "Properties": {
        "ApiId": {
          "Ref": "WebSocketWebSocketApiA2AA4B88",
        },
        "AutoDeploy": true,
        "StageName": "dev",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
